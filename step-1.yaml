# This playbook will, for the most part, install important prerequisites
---
- hosts: localhost
  tasks:

    # General prep work
    - name: Removing unattended upgrades
      become: true
      become_user: root
      apt:
        name: unattended-upgrades
        state: absent
      when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'

    - name: Checking if yq is installed   # noqa no-changed-when
      ansible.builtin.command: yq --version
      register: yq_result
      ignore_errors: true
      changed_when: false

    - name: Install yq   # noqa command-instead-of-module
      become: true
      become_user: root
      shell:
        cmd: curl -L $(curl -Ls -o /dev/null -w %{url_effective} https://github.com/mikefarah/yq/releases/latest | awk -F"/" 'BEGIN { OFS = "/"; ORS = "/" }{for(i=1;i<=NF-2;i++) print $i;} {print "download", $NF, "yq_linux_amd64.tar.gz"}' | awk '{ print substr( $0, 1, length($0)-1 ) }') --output yq_linux_amd64.tar.gz && tar -zxvf yq_linux_amd64.tar.gz && sudo mv -f yq_linux_amd64 /usr/bin/yq && rm ./yq* install-man-page.sh && yq --version   # noqa yaml
      when: yq_result is failed

    # Adding command aliases
    - name: Install Python3 pip
      become: true
      become_user: root
      apt:
        name: python3-pip
        update_cache: true
        state: present
      when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'

    - name: Add k alias for kubectl
      lineinfile:
        path: ~/.bashrc
        line: "alias k=kubectl"
        state: present
    - name: Add python alias for python3
      lineinfile:
        path: ~/.bashrc
        line: "alias python=python3"
        state: present
    - name: Add pip alias for pip3
      lineinfile:
        path: ~/.bashrc
        line: "alias pip=pip3"
        state: present

    # Adding in various environment variables Voltage release names and
    # kubernetes namespaces.
    - name: "Create env var in bashrc: Default kubernetes namespace for\
       all Voltage related resources"
      ansible.builtin.lineinfile:
        path: ~/.bashrc
        line: "export NS_MY_SDS_LAB=sds-lab1;"
        state: present
    - name: "Create env var in bashrc: Default k8s namespace for SDS deployment"
      ansible.builtin.lineinfile:
        path: ~/.bashrc
        line: "export NS_SDS_RELEASE=$NS_MY_SDS_LAB;"
        state: present
    - name: "Create env var in bashrc: Default k8s namespace for sd-local-deps"
      ansible.builtin.lineinfile:
        path: ~/.bashrc
        line: "export NS_SD_LOCAL_DEPS=$NS_MY_SDS_LAB;"
        state: present
    - name: "Create env var in bashrc: Default release name for SDS deployment"
      lineinfile:
        path: ~/.bashrc
        line: "export RN_SDS_RELEASE=sds-release;"
        state: present
    - name: "Create env var in bashrc: Default release name for sd-local-deps"
      lineinfile:
        path: ~/.bashrc
        line: "export RN_SD_LOCAL_DEPS=sd-local-deps;"
        state: present

    # Ensure the docker group exists & that the current user is included in it
    - name: Create docker group
      group:
        name: docker
        state: present
      become: true

    - name: Getting the current user   # noqa no-changed-when
      ansible.builtin.command: whoami
      register: user_result
      ignore_errors: false
      changed_when: user_result.rc == 2

    - name: Adding user "{{ user_result.stdout }}" to the docker user group
      user:
        name: "{{ user_result.stdout }}"
        groups: docker
        append: true
      become: true
